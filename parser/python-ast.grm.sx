(file_input      (>--> (seq* (rep (or NEWLINE (>--> stmt [stmt stmt]))) ENDMARKER)
                 [(list stmts '(ENDMARKER)) (cons 'program (remove '(NEWLINE) stmts))]     ))


(funcdef         (>--> (seq "def" NAME parameters (>--> (seq* ":" suite)[(list ":" suite)(list suite)]))
                 [(list 'def name params suite)   (list 'def (cons name params) suite)]   ))


(parameters      (>--> (seq* "(" (opt paramlist) ")")
                  [(list "(" paramlist ")") (if (eq? 'none paramlist) '() paramlist)]))

(paramlist       (>--> (seq* (>--> (seq* NAME (rep (>--> (seq* "," NAME)[(list "," name) name]
                                                                  ['() '()]))) [(list name reps) (cons name reps)]) 
                 (opt ","))
                 [(list params ",") params]
                 [(list params 'none) params]))


(stmt            (>--> (or simple_stmt compound_stmt)
                 [stmt stmt]     ))

(simple_stmt     (>--> (seq* (>--> (seq* small_stmt (rep (>--> (seq* ";" small_stmt)[(list ";" small_stmt) small_stmt])))[(list small_stmt reps) (cons small_stmt reps)]) (opt ";") NEWLINE)      
                  [(list simple_stmt 'none '(NEWLINE)) (car simple_stmt)]
                  [(list simple_stmt ";"   '(NEWLINE)) (car simple_stmt)]))

                 
(small_stmt      (>--> (or expr_stmt del_stmt pass_stmt flow_stmt global_stmt nonlocal_stmt assert_stmt)
                 [stmt stmt]))

(expr_stmt       (>--> (or (seq* testlist augassign testlist) (seq* testlist "=" testlist) tuple_or_test)
                 [(list t1 "=" t2) `(= ,t1 ,t2)]
                 ;[(list t1 augassign t2) (list augassign t1 t2)]
                 [expr_stmt (cons 'expr (list expr_stmt))]))

(augassign       (>--> (or "+=" "-=" "*=" "/=" "%=" "&=" "|=" "^=" "<<=" ">>=" "**=" "//=")
                 [augassign augassign] 
                 ))

(del_stmt        (seq "del" star_expr))
(pass_stmt       "pass")
(flow_stmt       (>--> (or break_stmt continue_stmt return_stmt raise_stmt)
                 [stmt stmt]      ))
(break_stmt      "break")
(continue_stmt   "continue")

(return_stmt     (>--> (seq* "return" (opt testlist))
                 [(list 'return 'none) (list 'return)]
                 [(list 'return testlist) (list 'return  testlist)]))

(raise_stmt      (>--> (seq* "raise" (opt (seq* test (opt (seq* "from" test)))))
                 [(list 'raise 'none) (list 'raise)]
                 [(list 'raise (list test 'none)) (cons 'raise test)]
                 [(list 'raise (list test1 (list 'from test2))) `('raise ,@test1 ,@test2)]))

(global_stmt     (>--> (seq* "global" NAME (>--> (rep (>--> (seq* "," NAME)[(list "," name) name]))[reps `(,@reps)]))[(list 'global name reps)(cons 'global (cons name reps)) ]))
(nonlocal_stmt   (>--> (seq* "nonlocal" NAME (>--> (rep (>--> (seq* "," NAME)[(list "," name) name]))[reps `(,@reps)]))[(list 'nonlocal name reps)(cons 'nonlocal (cons name reps))]))

(assert_stmt     (>--> (seq* "assert" test (opt (seq* "," test)))
                 [(list 'assert test 'none) (list 'assert (cons 'comparison test))]
                 [(list 'assert test1 (list "," test2)) (list 'assert (cons 'comparison test1) (cons 'comparison test2))]))

(compound_stmt   (or if_stmt while_stmt for_stmt try_stmt funcdef))

(if_stmt         (>--> (seq* "if" test ":" suite 
                             (rep (>--> (seq* "elif" test ":" suite)[(list 'elif test ":" suite) (cons (cons 'comparison test) suite)])) 
                             (opt (>--> (seq* "else" ":" suite)[(list 'else ":" suite) (cons 'else (list suite))])))
                       [(list 'if test ":" suite reps 'none)  (list 'cond (list (cons 'comparison test) suite ))]
                       
                       [(list 'if test ":" suite reps else)   (if (= 0 (length reps))(list 'cond (list (cons 'comparison test) suite) else)
                                                                                     (append `(cond ,(list (cons 'comparison test) suite) ,@reps) else))                                                             
                                                                                     ]
                       ))

(while_stmt      (>--> (seq* "while" test ":" suite 
                       (opt (>--> (seq* "else" ":" suite) 
                            [(list 'else ":" suite) suite] ))) 
                 [(list 'while test ":" suite 'none) (list 'while test suite)]
                 [(list 'while test ":" suite else)  (list 'while test suite else )]
                 ))

(for_stmt        (>--> (seq* "for" NAME "in" test ":" suite (opt (seq* "else" ":" suite)))
                 [(list 'for name 'in test ":" suite 'none) (list 'for name test suite)]      ))

(try_stmt        (>--> (seq* "try" ":" suite 
                             (or (seq* (rep+ (seq except_clause ":" suite)) (opt (seq* "else" ":" suite)) (opt (seq* "finally" ":" suite))) 
                                 (seq* "finally" ":" suite)))
                 
                       
                       
                       [(list 'try ":" suite) (list suite)]     ))

(except_clause   (seq* "except" (opt (seq* test (opt (seq* "as" NAME))))))

(suite           (or (>--> simple_stmt [simple_stmt (list 'suite (list simple_stmt))]) (>--> (seq* NEWLINE INDENT (rep+ (>--> stmt [stmt stmt])) DEDENT)
                 [(list '(NEWLINE) '(INDENT) reps '(DEDENT)) (if (= 1 (length reps))(cons 'suite reps)(cons 'suite reps))])      ))

(test            (or (seq or_test "if" or_test "else" test) or_test lambdef))
                      
(lambdef         (seq "lambda" (opt paramlist) ":" test))

(or_test         (>--> (seq and_test (rep (seq "or" and_test)))
                 [(list and_test) and_test]     ))

(and_test        (>--> (seq not_test (rep (seq "and" not_test)))
                 [(list not_test) not_test]      ))

(not_test        (or (seq "not" not_test) comparison))

(comparison      (>--> (seq* star_expr (>--> (rep (seq* comp_op star_expr))[a (list a)]))
                 [(list star_expr (list reps))  (if (eq? '() reps) star_expr (cons star_expr reps))]
                 ))
                 

(comp_op         (or "<" ">" "==" ">=" "<=" "<>" "!=" "in" (seq "not" "in") "is" (seq "is" "not")))

(star_expr       (>--> (seq* (opt "*") expr)
                 [(list a) a]                       
                 [(list "*" star_expr) (list 'star star_expr)]
                 [(list 'none star_expr) star_expr] ))

(expr            (>--> (seq xor_expr (rep (>--> (seq "|" xor_expr)[(list "|" xor_expr) xor_expr])))
                 [(list a) a]                       
                 [(list term reps) (if (= 0 (length reps)) term (cons 'bitwise-or reps))]))

(xor_expr        (>--> (seq and_expr (rep (>--> (seq "^" and_expr)[(list "^" and_expr) and_expr])))
                 [(list a) a]                       
                 [(list term reps) (if (= 0 (length reps)) term (cons 'bitwise-xor reps))]))

(and_expr        (>--> (seq shift_expr (rep (>--> (seq "&" shift_expr)[(list "&" shift_expr) shift_expr])))
                 [(list a) a]                     
                 [(list term reps) (if (= 0 (length reps)) term (cons 'bitwise-and reps))]))

(shift_expr      (>--> (seq arith_expr (rep (seq (or "<<" ">>") arith_expr)))
                 [(list a) a]
                 [(list term reps) (if (= 0 (length reps)) term (cons 'shift (cons term reps)))]))


(arith_expr      (>--> (seq* term (rep (seq* (or "+" "-") term)))
                 [(list term '()) term ]
                 [(list term reps) (if (= 0 (length reps)) term (cons 'arith (cons term reps)))]
                 ))

(term            (>--> (seq* factor (rep (seq* (or "*" "/" "%" "//") factor)))
                  [(list factor) factor] 
                  [(list term reps) (if (= 0 (length reps)) term (cons 'term (cons term reps)))]))

(factor          (or (seq* (or "+" "-" "~") factor) power))

(indexed         (>--> (seq* atom (rep trailer))
                 [(list term reps) (if (eq? '() reps) term (cons 'indexed (cons term reps)))]

                 ;[(list atom) atom]
                 ;[atom atom]
                  ))

(power           (>--> (seq* indexed (opt (seq* "**" factor) ))
                  [(list indexed (list "**" factor)) (list 'power indexed factor)]
                  [(list indexed 'none) indexed]))

(atom            (>--> (or (seq* "(" (opt tuple_or_test) ")") (seq* "[" (opt testlist) "]") (seq* "{" (opt dictorsetmaker) "}") (>--> NAME [name name]) NUMBER (>--> (rep+ STRING) (reps (foldr string-append "" reps))) "..." "None" "True" "False")
                  [(list "(" tuple_or_test ")") (if (eq? 'none tuple_or_test) '() tuple_or_test)]
                  [(list "[" tuple_or_test "]") (if (eq? 'none tuple_or_test) '() (cons 'list tuple_or_test))]
                  [(list "{" dictorsetmaker "}") (if (eq? 'none dictorsetmaker) '() dictorsetmaker)]
                  ;[(list atom) atom]
                  [atom atom]
                  ))
                  
                
                

(trailer        (>--> (or (seq* "(" (opt arglist) ")") (seq* "[" tuple_or_test "]") (seq* "." NAME))
                [(list "(" args ")") (if (eq? 'none args) (list 'called) (cons 'called args))]
                [(list "[" args "]") (list (cons 'called args))]
                [(list "." name) (list (cons 'called name))]))


(testlist       (>--> (seq* (>--> (seq* test (rep (>--> (seq* "," test)[(list "," test) test])))[(list test reps) (cons test reps)])
                            
                      (opt ","))
                      [(list testlist ",") (if (= 1 (length testlist)) (car testlist) testlist)]
                      [(list testlist 'none) (if (= 1 (length testlist)) (car testlist) testlist)]))


(tuple_or_test  (>--> (seq* test (rep (>--> (seq* "," test)[(list "," test) (list test)])) (opt ","))
                [(list test reps none) (if (> (length reps) 0) (cons 'tuple (cons test reps)) test)]
                [(list test reps ",")  (if (> (length reps) 0) (cons 'tuple (cons test reps)) test)]))

(dictorsetmaker (or ;DICT
                    (>--> (seq* (>--> (seq* (>--> (seq* test ":" test)[(list test1 ":" test2)(list test1 test2)]) (rep (>--> (seq* "," test ":" test)[(list "," test1 ":" test2)(list test1 test2)])))[(list dict reps)(cons dict reps)]) (opt ","))[(list dict opt) (cons 'dict dict)]) 
                    ;SET
                    (>--> (seq* (>--> (seq* test (rep (>--> (seq* "," test)[(list "," test) test])))[(list test reps) (cons test reps)]) (opt ","))[(list set opt) (cons 'set set)])))

(arglist        (>--> (seq* (>--> (seq* test (rep (>--> (seq* "," test)
                                                        [(list "," test) test]
                                                        )))
                                  [(list test reps) (if (= 0 (length (list reps))) test (cons test reps))]
                                  [(list test) test]
                                  )(opt ","))
                      [(list args ",") args]
                      [(list args 'none) args]
                      ))

