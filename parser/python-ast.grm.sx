(file_input      (>--> (seq* (rep (or NEWLINE (>--> stmt [stmt (cdr stmt)]))) ENDMARKER)
                 [(list stmts '(ENDMARKER)) (cons 'program (remove '(NEWLINE) stmts))]     ))


(funcdef         (>--> (seq "def" NAME parameters (>--> (seq ":" suite)[(list ":" suite)(list suite)]))
                 [(list def name params suite)   (list 'def (list name params) suite)]   ))


(parameters      (>--> (seq* "(" (opt paramlist) ")")
                  [(list "(" paramlist ")") (if (eq? 'none paramlist) '() paramlist)]))

(paramlist       (>--> (seq* (>--> (seq* NAME (rep (>--> (seq* "," NAME)[(list "," name) name]
                                                                  ['() '()]))) [(list name reps) (cons name reps)]) 
                 (opt ","))
                 [(list params ",") params]
                 [(list params 'none) params]))


(stmt            (>--> (or simple_stmt compound_stmt)
                 [stmt (cons 'expr stmt)]     ))

(simple_stmt     (>--> (seq* (>--> (seq* small_stmt (rep (>--> (seq* ";" small_stmt)[(list ";" small_stmt) small_stmt])))[(list small_stmt reps) (cons small_stmt reps)]) (opt ";") NEWLINE)      
                  [(list simple_stmt 'none '(NEWLINE)) (car simple_stmt)]
                  [(list simple_stmt ";"   '(NEWLINE)) (car simple_stmt)]))

                 
(small_stmt      (>--> (or expr_stmt del_stmt pass_stmt flow_stmt global_stmt nonlocal_stmt assert_stmt)
                 [stmt stmt]))

(expr_stmt       (>--> (or (seq* testlist augassign testlist) (seq* testlist "=" testlist) tuple_or_test)
                 [(list t1 augassign t2) (list augassign t1 t2)]
                 [(list t1 "=" t2) (list "=" t1 t2)]
                 [expr_stmt expr_stmt]      ))

(augassign       (>--> (or "+=" "-=" "*=" "/=" "%=" "&=" "|=" "^=" "<<=" ">>=" "**=" "//=")
                 [augassign augassign] 
                 ))

(del_stmt        (seq "del" star_expr))
(pass_stmt       "pass")
(flow_stmt       (>--> (or break_stmt continue_stmt return_stmt raise_stmt)
                 [stmt stmt]      ))
(break_stmt      "break")
(continue_stmt   "continue")
(return_stmt     (>--> (seq* "return" (opt testlist))
                 [(list 'return 'none) 'return]
                 [(list 'return testlist) (list 'return testlist)]))

(raise_stmt      (seq "raise" (opt (seq test (opt (seq "from" test))))))
(global_stmt     (seq "global" NAME (rep (seq "," NAME))))
(nonlocal_stmt   (seq "nonlocal" NAME (rep (seq "," NAME))))
(assert_stmt     (seq "assert" test (opt (seq "," test))))

(compound_stmt   (or if_stmt while_stmt for_stmt try_stmt funcdef))
(if_stmt         (seq "if" test ":" suite (rep (seq "elif" test ":" suite)) (opt (seq "else" ":" suite))))
(while_stmt      (seq "while" test ":" suite (opt (seq "else" ":" suite))))
(for_stmt        (seq "for" NAME "in" test ":" suite (opt (seq "else" ":" suite))))
(try_stmt        (seq "try" ":" suite (or (seq (rep+ (seq except_clause ":" suite)) (opt (seq "else" ":" suite)) (opt (seq "finally" ":" suite))) (seq "finally" ":" suite))))
(except_clause   (seq "except" (opt (seq test (opt (seq "as" NAME))))))

(suite           (or simple_stmt (>--> (seq* NEWLINE INDENT (rep+ (>--> stmt [stmt (cdr stmt)])) DEDENT)
                 [(list '(NEWLINE) '(INDENT) reps '(DEDENT)) (list (cons 'suite reps))])      ))

(test            (or (seq or_test "if" or_test "else" test) or_test lambdef))

(lambdef         (seq "lambda" (opt paramlist) ":" test))

(or_test         (>--> (seq and_test (rep (seq "or" and_test)))
                 [(list and_test) and_test]     ))

(and_test        (>--> (seq not_test (rep (seq "and" not_test)))
                 [(list not_test) not_test]      ))

(not_test        (or (seq "not" not_test) comparison))

(comparison      (>--> (seq star_expr (rep (seq* comp_op star_expr)))
                 [(list star_expr) star_expr ]
                 [(list star_expr reps) (cons star_expr reps)]))

(comp_op         (or "<" ">" "==" ">=" "<=" "<>" "!=" "in" (seq "not" "in") "is" (seq "is" "not")))

(star_expr       (>--> (seq* (opt "*") expr)
                 [(list "*" star_expr) (list 'star star_expr)]
                 [(list 'none star_expr) star_expr] ))

(expr            (>--> (seq xor_expr (rep (seq "|" xor_expr)))
                 [(list a) a]      ))

(xor_expr        (>--> (seq and_expr (rep (seq "^" and_expr)))
                 [(list a) a]      ))

(and_expr        (>--> (seq shift_expr (rep (seq "&" shift_expr)))
                 [(list a) a]      ))

(shift_expr      (>--> (seq arith_expr (rep (seq (or "<<" ">>") arith_expr)))
                 [(list arith_expr) arith_expr]      ))


(arith_expr      (>--> (seq* term (rep (seq* (or "+" "-") term)))
                 ;[(list term) term ]
                 [(list term reps) (if (= 0 (length reps)) term (cons 'arith (cons term reps)))]))

(term            (>--> (seq* factor (rep (seq* (or "*" "/" "%" "//") factor)))
                  [(list term reps) (if (= 0 (length reps)) term (cons 'term (cons term reps)))]))

(factor          (or (seq* (or "+" "-" "~") factor) power))

(indexed         (>--> (seq atom (rep trailer))
                 [(list term reps) (if (= 0 (length reps)) term (cons 'indexed (cons term reps)))]

                 [(list atom) atom]
                 [atom atom]
                  ))

(power           (>--> (seq* indexed (opt (seq* "**" factor) ))
                  [indexed (car indexed)]
                  [(list indexed "**" factor) indexed]
                  [(list indexed) indexed]))

(atom            (>--> (or (seq "(" (opt tuple_or_test) ")") (seq "[" (opt testlist) "]") (seq "{" (opt dictorsetmaker) "}") NAME NUMBER (rep+ STRING) "..." "None" "True" "False")
                  [(list "(" tuple_or_test ")") (list "hi" tuple_or_test)]
                  [(list atom) atom]
                  [atom atom]
                  ))
                  
                
                

(trailer        (>--> (or (seq* "(" (opt arglist) ")") (seq* "[" tuple_or_test "]") (seq* "." NAME))
                [(list "(" args ")") (list (cons 'called args))]
                [(list "[" args "]") (list (cons 'called args))]
                [(list "." name) (list (cons 'called name))]))


(testlist       (>--> (seq* (>--> (seq* test (rep (>--> (seq* "," test)[(list "," test) test])))[(list test reps) (cons test reps)])
                            
                      (opt ","))
                      [(list testlist ",") (if (= 1 (length testlist)) (car testlist) testlist)]
                      [(list testlist 'none) (if (= 1 (length testlist)) (car testlist) testlist)]))


(tuple_or_test  (>--> (seq* test (rep (seq "," test)) (opt ","))
                [(list test '() none) test]      ))

(dictorsetmaker (or (seq (seq (seq test ":" test) (rep (seq "," test ":" test))) (opt ",")) (seq (seq test (rep (seq "," test))) (opt ","))))

(arglist        (>--> (seq* (>--> (seq* test (rep (seq* "," test))) ;=>
                                   [(list term reps) (if (= 0 (length reps)) term (cons term (cdar reps)))]
                             ) (opt ","))
               
                   [(list test reps) test ]      ))
